<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clarity</title>
    <link>https://www.blentle.com/</link>
    <description>Recent content on Clarity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2016–2026, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 04 Nov 2019 22:10:14 +0800</lastBuildDate><atom:link href="https://www.blentle.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Oom Killer机制</title>
      <link>https://www.blentle.com/post/linux-oom-killer/</link>
      <pubDate>Mon, 04 Nov 2019 22:10:14 +0800</pubDate>
      
      <guid>https://www.blentle.com/post/linux-oom-killer/</guid>
      <description>
        
          
            linux oom killer机制 简介 The OOM Killer 是内核中的一个进程，当系统出现严重内存不足时，它就会启用自己的算法去选择某一个进程并杀掉. 之所以会发生这种情况，是因为Linux内核在给某个进程分配内存时，会比进程申请的内存多分配一些. 这是为了保证进程在真正使用的时候有足够的内存，因为进程在申请内存后并不一定立即使用，当真正使用的时候，可能部分内存已经被回收了. 比如 当一个进程申请2G内存时，内核可能会分配2.5G的内存给它.通常这不会导致什么问题.然而一旦系统内大量的进程在使用内存时，就会出现内存供不应求.很快就会导致内存耗尽. 这时就会触发这个oom killer,它会选择性的杀掉某个进程以保证系统能够正常运行.
The OOM Killer选择哪个进程杀掉? The OOM Killer通过检查所有正在运行的进程，然后根据自己的算法给每个进程一个badness分数.拥有最高 badness分数的进程将会在内存不足时被杀掉.它打分的算法如下:
 某一个进程和它所有的子进程都占用了很多内存的将会打一个高分; 优先选择进程号最小的那个进程 内核进程和其他较重要的进程会被打成相对较低的分.  The OOM Killer给每一个进程打的分数都放在 /proc/{pid}/oom_score文件中，其实这里有三个文件，依次是
oom_score、oom_adj、oom_score_adj. 这三个文件按Linux官方文档来说就是：
oom_score是存储最终的分数，也就是badneess分数，最高的会被kill掉, man 一下 proc，找到:
1 /proc/[pid]/oom_score (since Linux 2.6.11) 2 This file displays the current score that the kernel gives to this process for the 3 purpose of selecting a process for the OOM-killer. A higher score means that the 4 process is more likely to be selected by the OOM-killer.
          
          
        
      </description>
    </item>
    
    <item>
      <title>ClickHouse源码安装踩坑笔记</title>
      <link>https://www.blentle.com/post/clickhouse-install/</link>
      <pubDate>Sat, 04 May 2019 22:10:14 +0800</pubDate>
      
      <guid>https://www.blentle.com/post/clickhouse-install/</guid>
      <description>
        
          
            前情概要 由于工作需要用到clickhouse, 这里暂不介绍概念，应用场景，谷歌，百度一大把. 将安装过程踩下的坑记录下来备用
ClickHouse源码 git clone安装（直接下载源码包安装失败）  源码安装一定要用git克隆下来，不要下载github上已经打好的包，因为有些依赖的子模块时时刻刻在更新.要不然编译各种报错. 一定要克隆，一定要克隆，一定要克隆
   github上找到一个最新的稳定版本，一般以 -stable结尾的
  创建一个clickhouse目录如 mkdir /data/clickhouse-19.7.3.9-stable,这里我带上版本号，方便以后好升级
  clone
    cd /data/clickhouse-19.7.3.9-stable
  git clone -b &#39;v19.7.3.9-stable&#39; --recursive https://github.com/yandex/ClickHouse.git
  这里递归下载依赖可能需要一点时间， 200kb/s的速度，我这里用了将近半个小时
升级子模块  cd /data/clickhouse-19.7.3.9-stable/ClickHouse
git submodule update --init --recursive
创建编译目录  cd /data/clickhouse-19.7.3.9-stable/ClickHouse
mkdir build
cd build
cmake3 .. （这一步生成可执行编译的makefile文件,如果系统没有cmake3 执行: sudo yum -y install cmake3 ）
这一步会报缺少很多依赖错误，报什么依赖错误，安装什么依赖即可,如果嫌麻烦，可以一次性安装所有依赖,按官方文档来：https://clickhouse.yandex/docs/en/development/build/，注意把debian系列的 apt-get命令换成 yum
          
          
        
      </description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://www.blentle.com/post/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.blentle.com/post/markdown-syntax/</guid>
      <description>
        
          
            &lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://www.blentle.com/post/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.blentle.com/post/placeholder-text/</guid>
      <description>
        
          
            &lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://www.blentle.com/post/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.blentle.com/post/math-typesetting/</guid>
      <description>
        
          
            &lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://www.blentle.com/post/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.blentle.com/post/emoji-support/</guid>
      <description>
        
          
            &lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>浅谈机械硬盘(hdd)和固态硬盘(ssd)内部结构及工作过程</title>
      <link>https://www.blentle.com/post/hdd-and-ssd-internal/</link>
      <pubDate>Tue, 17 Apr 2018 09:57:51 +0800</pubDate>
      
      <guid>https://www.blentle.com/post/hdd-and-ssd-internal/</guid>
      <description>
        
          
            机械硬盘(HDD) 构造 机械硬盘一般是由多个盘片构成,每个盘片有两面,表面附着磁性记录材料, 两面都可以存储数据.盘片被固定在中央可以旋转的主轴上,它使得盘片以通常5400 ~ 15000转 每分钟(不同类型的硬盘转速不同)的固定旋转速率旋转,如图1.盘面是由一组一组同心圆的磁道构成,每个磁道被划分成多个扇区(sector),每个扇区存储的就是实际的数据且固定512个字节.扇区之间是有间隙的, 间隙里不存储数据,但通常存储格式化的标识位,如图2.主轴的马达会在磁盘驱动器工作时, 恒速带动盘片旋转.读或写数据时,磁头必须定位到磁道上相应扇区的开始位置.磁盘臂摆动使得磁头定位到某一个磁道 上是一个机械动作, 相当耗时, 这个过程需要的时间称为寻道时间.磁道定位后, 磁盘控制器就一直等待,直到数据访问的扇区旋转到磁头处.扇区的开始处旋转到磁头处所需要的时间称为旋转延时.显然这也是一个 机械动作,自然也是也相当耗时. 一旦磁头定位成功,读写操作就随着扇区在磁头下的移动开始了.这个过程就是数据的传输过程,过程耗时也被称为传输时间.     一个盘面一个磁头,磁头从上到下,编号从0开始,依次递增. 磁道没有编号,通常使用柱面来替代磁道. 所谓柱面(cylinders)就是多个盘面一组同心圆垂直方向组成的圆柱的外表面, 这样一看是不是就是磁道? 柱面从外到里也是编号从0开始, 依次递增. 同样扇区也是有编号的, 同一个磁道, 扇区编号也是从0开始绕圆环递增,如图7
     上面说了扇区之间存在间隙.每个扇区的格式, 如图8     容量和耗时 容量 早期的磁盘每个磁道的扇区数都是相同的, 所以整个磁盘容量会这么计算:
1 总容量(字节数) = 盘面数(磁头数) x 柱面数(磁道数) x 扇区数 x 每个扇区存储的字节数(512) 但每个磁道扇区数如果都相同,从上面的图7中就可以看出,外面的磁道(半径大的)如果与里面的磁道拥有相同的扇区,会造成资源的极大浪费.所以现代磁盘会被划分成多个环带, 外层的环带比内层的环带拥有更多的扇区.如图9的磁盘具有两个环带,外层环带每个磁道有32个扇区,内层环带每个磁道16个扇区. 一个现代化具体的磁盘通常有16个环带,从内层到 外层,每个环带扇区数增加大约4%. 为了让操作系统更好的调用硬件接口,不需要复杂的计算.现代磁盘都会隐藏每个磁道有多少个扇区的细节,转而提供给操作系统一个虚拟的几何规格. 让软件在调用的时候,仿佛还是存在着固定的柱面,固定的扇区数.就如同图7所示     打开一台服务器执行如下Linux命令校验一下(可能需要sudo)
1 fdisk -l 输出结果如下:
1 Disk /dev/sda: 1999.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux内存管理-虚拟内存篇</title>
      <link>https://www.blentle.com/post/linux-vm-virtual-mem-01/</link>
      <pubDate>Sat, 10 Mar 2018 14:09:33 +0800</pubDate>
      
      <guid>https://www.blentle.com/post/linux-vm-virtual-mem-01/</guid>
      <description>
        
          
            介绍   虚拟内存是现代所有的操作系统支持的一个核心功能。虽然内存的容量增长快速,但 是软件的大小增长更快。这一发展的最终结果就是需要运行的程序会有可能大到内存 无法容纳，而且必然需要系统能够支持多个程序的同时运行，即使内存可以满足其中 单一程序的需要，总体来看可能仍然会超出内存的大小。早期出现了覆盖技术，思想 是把程序分割成许多片段,每个片段就是一个覆盖序列.在程序开始执行时,将覆盖管理 模块载入内存,该覆盖管理模块立即装入并运行序列0.执行完,序列0就通知覆盖管理模 块载入序列1,如果有多余的空间就占用序列0的上方位置,没有则占用序列0.覆盖块存 放在磁盘中,在需要时，由操作系统换入换出.这样看起来好像没有太大的问题,因为是 由操作系统来进行换入换出.但是应用程序需要被分割成多个片段.把一个大的程序分 割成小的、模块化的片段是非常耗时和枯燥的,并且容易出错.而且这个事要交给程序 员去做,那估计要崩溃了.没过多久聪明的人类就找到了解决版本,提出了虚拟内存的 概念.
  虚拟内存的基本思想是:每个程序都拥有自己的地址空间,这个空间被分成多个块, 每个块叫做一个页或一个页面.每一页有连续的地址范围.这些页被映射到物理内存, 但并不是所有的页必须在内存中才能运行程序.当程序引用到一部分在物理内存中 的地址空间时,由硬件立刻执行必要的映射.当程序引用到一部分不在物理内存中的 地址空间时,再由操作系统负责将缺失的部分装入物理内存并重新执行失败的命令, 这个过程叫缺页中断处理处理. 虚拟内存很适合在多道程序设计系统中使用,许多 程序的片段同时保存在内存中. 当一个程序等待它的一部分读入内存时,可以把CPU 交给另一个程序使用. 这里解释一下什么是多道程序设计系统,所谓的多道程序设 计系统指的是允许多个程序同时进入一个计算机系统的主存储器(即内存)并启动进 行计算的方法.也就是说,计算机内存中可以同时存放多个(两个或以上相互独立的) 正在运行的程序,它们都处于开始和结束之间.从宏观上看是并行的,多道程序都处 于运行中,并且都没有运行结束;从微观上看是串行的,各道程序轮流使用CPU,交替 执行.引入多道程序设计技术的根本目的是为了提高CPU的利用率,充分发挥计算机 系统部件的并行性,现代计算机系统都采用了多道程序设计技术.
  程序在访问一个内存地址指向的内存时,CPU不是直接把这个地址送到内存总线 上,而是被送到一个叫内存管理单元的硬件上(业界也叫MMU,是Memory Management Unit的简称),然后由这个硬件把这个内存地址映射到实际的物理内存地址上.程序 操作的这个地址称为虚拟内存地址.MMU作为CPU芯片的一部分,其实是单独的一个 芯片.MMU把虚拟内存地址映射成物理内存地址再送到总线的过程如下图:
       分页技术  上面提到了虚拟内存地址,实际上程序所访问的这些内存地址,构成了一个虚拟 地址空间,正如上面提到的,虚拟地址空间按照固定的大小被划分成若干单元,每 个单元叫做一个页或者一个页面.同时实际的物理内存也被划分成若干单元,但是 物理内存对应的这个单元被业界称作Page Frame(页帧或页框).虚拟内存的页面 和物理内存的页框通常是一样大的,比如都是4KB或者2MB,实际的页面大小可能从 512 byte到1GB.如下图,按每页4KB划分一个32KB的物理内存空间和一个64KB的虚 拟地址空间,可得到8个页框和16个虚拟页面.内存和磁盘之间的交换总是以整个 页面为单元进行的.       结合这两个图,下面简单的解释一下: 当程序试图访问地址0时,如执行下面的指令:
1MOV REG, 0  这句伪代码的意思是把地址0的数据送入寄存器中,REG是register的简称, 表示寄存器.
          
          
        
      </description>
    </item>
    
    <item>
      <title>编译原理学习笔记-术语介绍(开篇)</title>
      <link>https://www.blentle.com/post/compile-internal-0/</link>
      <pubDate>Sun, 06 Aug 2017 20:57:08 +0800</pubDate>
      
      <guid>https://www.blentle.com/post/compile-internal-0/</guid>
      <description>
        
          
            一直对lucene源码感兴趣，但是每次看到分词的地方，上面一大堆注释说是用xx工具生成的，就不了了之，也没能跳过这个地儿，作为一个打破砂锅问到底的人强迫症太厉害了，决定先攻编译原理，整明白词法分析，语法分析再来攻lucene，整好最近看redis 和mysql源码解析命令和sql语句，先来上个脑图:
     学习前，先来了解两个概念：
 编译器 ：计算机上运行的所有软件都是用某种程序设计语言编写的，但是一个程序在运行之前需要被翻译成能够被计算机所识别的形式，也就是及机器语言，完成这项翻译任务的软件就是编译器，也就是说编译器本身也是一个软件,如下图:   Image not found  a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; }  Web path: https://upload-images.jianshu.io/upload_images/12069275-67cb3161c1996048.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240
Disk path: /static/https://upload-images.jianshu.io/upload_images/12069275-67cb3161c1996048.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240
Using Page Bundles: false
  解释器：直接使用用户提供的输入的源程序进行计算执行，同时把结果输出给用户，如下图:   Image not found  a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; }  Web path: https://upload-images.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
