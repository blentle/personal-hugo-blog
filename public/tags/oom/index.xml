<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oom on Clarity</title>
    <link>https://www.blentle.com/tags/oom/</link>
    <description>Recent content in oom on Clarity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2016–2026, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 04 Nov 2019 22:10:14 +0800</lastBuildDate><atom:link href="https://www.blentle.com/tags/oom/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Oom Killer机制</title>
      <link>https://www.blentle.com/post/linux-oom-killer/</link>
      <pubDate>Mon, 04 Nov 2019 22:10:14 +0800</pubDate>
      
      <guid>https://www.blentle.com/post/linux-oom-killer/</guid>
      <description>
        
          &lt;h2 id=&#34;linux-oom-killer机制&#34;&gt;linux oom killer机制&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;The OOM Killer 是内核中的一个进程，当系统出现严重内存不足时，它就会启用自己的算法去选择某一个进程并杀掉. 之所以会发生这种情况，是因为Linux内核在给某个进程分配内存时，会比进程申请的内存多分配一些. 这是为了保证进程在真正使用的时候有足够的内存，因为进程在申请内存后并不一定立即使用，当真正使用的时候，可能部分内存已经被回收了. 比如 当一个进程申请2G内存时，内核可能会分配2.5G的内存给它.通常这不会导致什么问题.然而一旦系统内大量的进程在使用内存时，就会出现内存供不应求.很快就会导致内存耗尽. 这时就会触发这个oom killer,它会选择性的杀掉某个进程以保证系统能够正常运行.&lt;/p&gt;
&lt;h3 id=&#34;the-oom-killer选择哪个进程杀掉&#34;&gt;The OOM Killer选择哪个进程杀掉?&lt;/h3&gt;
&lt;p&gt;The OOM Killer通过检查所有正在运行的进程，然后根据自己的算法给每个进程一个badness分数.拥有最高 badness分数的进程将会在内存不足时被杀掉.它打分的算法如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某一个进程和它所有的子进程都占用了很多内存的将会打一个高分;&lt;/li&gt;
&lt;li&gt;优先选择进程号最小的那个进程&lt;/li&gt;
&lt;li&gt;内核进程和其他较重要的进程会被打成相对较低的分.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The OOM Killer给每一个进程打的分数都放在 /proc/{pid}/oom_score文件中，其实这里有三个文件，依次是&lt;/p&gt;
&lt;p&gt;oom_score、oom_adj、oom_score_adj. 这三个文件按Linux官方文档来说就是：&lt;/p&gt;
&lt;p&gt;oom_score是存储最终的分数，也就是badneess分数，最高的会被kill掉, man 一下 proc，找到:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;    /proc/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;/oom_score &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;since Linux 2.6.11&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;    This  file displays the current score that the kernel gives to this process &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;    purpose of selecting a process &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the OOM-killer.  A higher score means  that  the
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;    process  is more likely to be selected by the OOM-killer.  The basis &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; this score
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    is the amount of memory used by the process, with increases &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;+&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  or  decreases  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; factors including:
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    * whether the process creates a lot of children using fork&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;+&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    * whether  the  process has been running a long time, or has used a lot of CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    * whether the process has a low nice value &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;i.e., &amp;gt; 0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;+&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    * whether the process is privileged &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; and
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    * whether the process is making direct hardware access &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    The oom_score also reflects  the  adjustment  specified  by  the  oom_score_adj  or
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    oom_adj setting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the process.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;oom_adj这个文件已经过时了，当前存在 是为了兼容旧版本的内核,， 同样man一下 proc 找到:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;    /proc/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;/oom_adj &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;since Linux 2.6.11&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;    This file can be used to adjust the score used to &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; which  process  should  be
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;    killed  in an out-of-memory &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OOM&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; situation.  The kernel uses this value &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; a bit-
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt; operation of the process&lt;span class=&#34;s1&#34;&gt;&amp;#39;s oom_score value: valid values are in the range -16
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    to  +15, plus the special value -17, which disables OOM-killing altogether for this
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    process.  A positive score increases the likelihood of this process being killed by
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    the OOM-killer; a negative score decreases the likelihood.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    The  default  value for this file is 0; a new process inherits its parent&amp;#39;&lt;/span&gt;s oom_adj
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    setting.  A process must be privileged &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CAP_SYS_RESOURCE&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to update this file.
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    Since  Linux   2.6.36,   use   of   this   file   is   deprecated   in   favor   of
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    /proc/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;/oom_score_adj.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;oom_score_adj 是新版本内核官方建议使用的,看一下使用说明:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;    /proc/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;/oom_score_adj &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;since Linux 2.6.36&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;    This  file can be used to adjust the badness heuristic used to &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; which process
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;    gets killed in out-of-memory conditions.
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    The badness heuristic assigns a value to each candidate task ranging from &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;never
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  to &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;always &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to determine which process is targeted.  The units are
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    roughly a proportion along that range of allowed memory the  process  may  allocate
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    from, based on an estimation of its current memory and swap use.  For example, &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; a
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    task is using all allowed memory, its badness score will be 1000.  If it  is  using
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    half of its allowed memory, its score will be 500.
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    There  is  an  additional  factor included in the badness score: root processes are
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    given 3% extra memory over other tasks.
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    The amount of &lt;span class=&#34;s2&#34;&gt;&amp;#34;allowed&amp;#34;&lt;/span&gt; memory depends on the context in which the  OOM-killer  was
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    called.   If it is due to the memory assigned to the allocating task&lt;span class=&#34;s1&#34;&gt;&amp;#39;s cpuset being
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    exhausted, the allowed memory represents the set of mems assigned  to  that  cpuset
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    (see  cpuset(7)).   If  it  is  due  to  a mempolicy&amp;#39;&lt;/span&gt;s node&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; being exhausted, the
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    allowed memory represents the &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; of mempolicy nodes.  If it is  due  to  a  memory
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    limit  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or  swap limit&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; being reached, the allowed memory is that configured limit.
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    Finally, &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; it is due to the entire system being out of memory, the allowed  memory
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    represents all allocatable resources.
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    The  value  of  oom_score_adj  is  added  to the badness score before it is used to
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    determine   which   task   to   kill.    Acceptable   values   range   from   -1000
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OOM_SCORE_ADJ_MIN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  to  +1000 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OOM_SCORE_ADJ_MAX&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.  This allows user space to con‐
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    trol the preference &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; OOM-killing, ranging from always preferring a certain  task
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    or  completely disabling it from OOM-killing.  The lowest possible value, -1000, is
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    equivalent to disabling OOM-killing entirely &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; that task, since  it  will  always
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    report a badness score of 0.
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    Consequently,  it  is  very simple &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; user space to define the amount of memory to
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    consider &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; each task.  Setting a oom_score_adj value of  +500,  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;  example,  is
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    roughly  equivalent  to  allowing  the  remainder of tasks sharing the same system,
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    cpuset, mempolicy, or memory controller resources to use at least 50% more  memory.
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    A  value of -500, on the other hand, would be roughly equivalent to discounting 50%
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    of the task&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s allowed memory from being considered as scoring against the task.
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    For backward compatibility with previous kernels, /proc/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;/oom_adj can still  be
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    used to tune the badness score.  Its value is scaled linearly with oom_score_adj.
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    Writing  to  /proc/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;/oom_score_adj or /proc/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;/oom_adj will change the other
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    with its scaled value.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后一句也就是说为了兼容旧版本的内核，oom_score_adj和oom_adj任何一个变动，另一个也会自动跟着改动.&lt;/p&gt;
&lt;p&gt;这三个文件先了解到这.后面还会用到.&lt;/p&gt;
&lt;h3 id=&#34;如何找到一个进程是被the-oom-killer杀掉的&#34;&gt;如何找到一个进程是被The OOM Killer杀掉的?&lt;/h3&gt;
&lt;p&gt;最简单的方法就是用dmesg看系统日志. 对于redhat系的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    dmesg &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; egrep -i “killed process”
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如系统可能输出(这是我本地测试的):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    host kernel: Out of Memory: Killed process &lt;span class=&#34;m&#34;&gt;13482&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;mysql&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者直接查看日志&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    egrep -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;killed process&amp;#39;&lt;/span&gt; /var/log/messages*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;如何阻止一些重要的进程不被the-oom-killer杀掉&#34;&gt;如何阻止一些重要的进程不被The OOM Killer杀掉&lt;/h3&gt;
&lt;p&gt;The OOM killer 通常是检查 oom_score_obj(上面提到的)值，并经过计算得出最终的oom_score来决定杀死哪个进程的. 所以我们查一下内核里面定义的这个值的取值范围再去修改其值 .这里我看的是4.13.16这个版本.&lt;/p&gt;
&lt;p&gt;源代码是 oom_kill.c &lt;a href=&#34;https://elixir.bootlin.com/linux/v4.13.16/source/mm/oom_kill.c&#34;&gt;https://elixir.bootlin.com/linux/v4.13.16/source/mm/oom_kill.c&lt;/a&gt;，里面引用了头文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;linux/oom.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而这个oom.h又引用了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;uapi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个头文件，查看这个文件&lt;/p&gt;
&lt;p&gt;内核定义的值的范围: &lt;a href=&#34;https://elixir.bootlin.com/linux/v4.13.16/source/include/uapi/linux/oom.h&#34;&gt;https://elixir.bootlin.com/linux/v4.13.16/source/include/uapi/linux/oom.h&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#ifndef _UAPI__INCLUDE_LINUX_OOM_H
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#define _UAPI__INCLUDE_LINUX_OOM_H
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;    &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * /proc/&amp;lt;pid&amp;gt;/oom_score_adj set to OOM_SCORE_ADJ_MIN disables oom killing for
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * pid.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#define OOM_SCORE_ADJ_MIN	(-1000)
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#define OOM_SCORE_ADJ_MAX	1000
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * /proc/&amp;lt;pid&amp;gt;/oom_adj set to -17 protects from the oom killer for legacy
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * purposes.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#define OOM_DISABLE (-17)
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;cm&#34;&gt;/* inclusive */&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#define OOM_ADJUST_MIN (-16)
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#define OOM_ADJUST_MAX 15
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#endif &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* _UAPI__INCLUDE_LINUX_OOM_H */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这意味着我们可以把要保护的进程的oom_score_obj的值调整成一个较小的负值, 或者把oom_adj调成 -17,这两个文件已经在上面说过了.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    sudo &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -200 &amp;gt; /proc/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;/oom_score_adj  （如果-200是所有进程中最大的，当系统内存不足时，还是会被oom-killer杀掉）
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;    或
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;    sudo &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -17 &amp;gt; /proc/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;/oom_adj  （不会被oom-killer杀掉）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;如何查看所有正在running的进程的badnees-score&#34;&gt;如何查看所有正在Running的进程的badnees score&lt;/h3&gt;
&lt;p&gt;这里我借用一下&lt;a href=&#34;https://dev.to/rrampage&#34;&gt;Raunak Ramakrishnan &lt;/a&gt;&lt;a href=&#34;http://twitter.com/OrdinalSpace&#34;&gt; &lt;/a&gt;&lt;a href=&#34;http://github.com/rrampage&#34;&gt; &lt;/a&gt;大神写的一个脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# Displays running processes in descending order of OOM score&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;PID\tOOM Score\tOOM Adj\tCommand\n&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -r pid comm&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -f /proc/&lt;span class=&#34;nv&#34;&gt;$pid&lt;/span&gt;/oom_score &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;cat /proc/&lt;span class=&#34;nv&#34;&gt;$pid&lt;/span&gt;/oom_score&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;%d\t%d\t\t%d\t%s\n&amp;#39;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$pid&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;cat /proc/&lt;span class=&#34;nv&#34;&gt;$pid&lt;/span&gt;/oom_score&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;cat /proc/&lt;span class=&#34;nv&#34;&gt;$pid&lt;/span&gt;/oom_score_adj&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$comm&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ps -e -o &lt;span class=&#34;nv&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -o &lt;span class=&#34;nv&#34;&gt;comm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -k 2nr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;如何强制触发the-oom-killer&#34;&gt;如何强制触发The OOM Killer&lt;/h3&gt;
&lt;p&gt;在内核官方文档上有一篇文章:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/v4.11/admin-guide/sysrq.html&#34;&gt;https://www.kernel.org/doc/html/v4.11/admin-guide/sysrq.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;详细说明了 /proc/sysrq-trigger的各种操作和作用&lt;/p&gt;
&lt;h3 id=&#34;参考文献&#34;&gt;参考文献&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux内核官方文档：&lt;a href=&#34;https://www.kernel.org/doc/html/v4.11/admin-guide/sysrq.html&#34;&gt;@Linux官方内核文档&lt;/a&gt;(&lt;a href=&#34;https://www.kernel.org/doc/html/v4.11/admin-guide/sysrq.html&#34;&gt;https://www.kernel.org/doc/html/v4.11/admin-guide/sysrq.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;博文：&amp;lt;&lt;a href=&#34;https://github.com/lorenzo-stoakes/linux-vm-notes/blob/master/sections/oom.md&#34;&gt;https://github.com/lorenzo-stoakes/linux-vm-notes/blob/master/sections/oom.md&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;Oracle官方文档：&amp;lt;&lt;a href=&#34;https://www.oracle.com/technical-resources/articles/it-infrastructure/dev-oom-killer.html&#34;&gt;https://www.oracle.com/technical-resources/articles/it-infrastructure/dev-oom-killer.html&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;人工触发The OOM Killer：&amp;lt;&lt;a href=&#34;https://www.lynxbee.com/how-to-invoke-oom-killer-manually-for-understanding-which-process-gets-killed-first/&#34;&gt;https://www.lynxbee.com/how-to-invoke-oom-killer-manually-for-understanding-which-process-gets-killed-first/&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;Raunak Ramakrishnan大神的博客: &amp;lt;&lt;a href=&#34;https://dev.to/rrampage/surviving-the-linux-oom-killer-2ki9&#34;&gt;https://dev.to/rrampage/surviving-the-linux-oom-killer-2ki9&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
